# üß≠ Manual de Buenas Pr√°cticas para el Manejo de Issues

**Versi√≥n:** 1.4  
**√öltima actualizaci√≥n:** _(fecha actual)_  
**Aplicable a:** Repositorios vinculados a tickets del **CRM Smart Strategy Quickbase**

---

## 1. Prop√≥sito y Alcance

Este manual define **pol√≠ticas obligatorias y lineamientos claros** para la creaci√≥n, gesti√≥n y cierre de Issues en GitHub.  
Su finalidad es **garantizar trazabilidad**, comunicaci√≥n t√©cnica efectiva y consistencia entre el **CRM Smart Strategy Quickbase** y los repositorios de desarrollo.

Se aplica a todos los integrantes del equipo de desarrollo de Smart Strategy y a cualquier colaborador autorizado que gestione Issues en repositorios corporativos.

---

## 2. Principios Generales

- Toda modificaci√≥n de c√≥digo debe estar **respaldada por una Issue activa**.  
- Las discusiones t√©cnicas deben documentarse dentro del hilo del Issue.  
- La informaci√≥n debe ser clara, verificable y rastreable hasta el ticket original en el CRM.  
- Las pol√≠ticas aqu√≠ descritas son **obligatorias** y sujetas a revisi√≥n semestral.

---

## 3. Estructura y Gesti√≥n de una Issue

### 3.1 T√≠tulo
[CRM#<n√∫mero>] <breve descripci√≥n>
Ejemplo: `[CRM#1023] Error al generar XML de Nota de Cr√©dito Parcial`

### 3.2 Descripci√≥n
Usar formato **Markdown** e incluir:
- N√∫mero del ticket del CRM Smart Strategy Quickbase  
- Resumen del problema  
- Pasos para reproducir  
- Resultado esperado / actual  
- Notas t√©cnicas o hip√≥tesis  

### 3.3 Creaci√≥n y Asignaci√≥n
- El Issue puede ser creado por el **Team Lead** o por el **Developer** que determine la necesidad de cambio.  
- Debe vincularse expl√≠citamente con el ticket CRM.  
- Ning√∫n desarrollo inicia sin una Issue asignada.

### 3.4 Etiquetas (Labels)
Usar etiquetas estandarizadas:
| Categor√≠a | Ejemplo | Uso |
|------------|----------|------|
| Tipo | `bug`, `enhancement`, `documentation` | Clasifica la naturaleza |
| Estado | `in progress`, `needs review`, `blocked` | Indica avance |
| Prioridad | `P1`, `P2`, `P3` | Define urgencia |
| Validaci√≥n | `needs-info`, `duplicate`, `invalid` | Revisi√≥n / QA |

---

## 4. Desarrollo y Vinculaci√≥n

- Rama obligatoria:  
feature/CRM1023-fix-nc-parcial
- Documentar en el Issue cualquier definici√≥n t√©cnica tomada fuera de GitHub (correo, RocketChat, llamada).  
- Commits deben referenciar la Issue:  
- `Fixes #123` ‚Üí cierra autom√°ticamente  
- `Ref #123` ‚Üí mantiene abierta para QA  

---

## 5. Ciclo de Vida

Analizar Ticket ‚Üí Crear Issue ‚Üí Asignar ‚Üí Desarrollar ‚Üí Validar ‚Üí Cerrar

| Estado | Descripci√≥n |
|---------|--------------|
| **Open** | Activa o en an√°lisis |
| **In Progress** | En desarrollo |
| **Review** | En validaci√≥n QA |
| **Closed** | Resuelta y aprobada |
| **Reopened** | Requiere ajuste adicional |

---

## 6. Relaci√≥n Ticket ‚Üî Issue

| Etapa | Acci√≥n | Responsable |
|--------|---------|-------------|
| 1 | Ticket recibido en CRM Smart Strategy Quickbase | Equipo de atenci√≥n |
| 2 | An√°lisis de necesidad de c√≥digo | TL o Developer |
| 3 | Creaci√≥n del Issue en GitHub y vinculaci√≥n al ticket | TL o Developer |
| 4 | Asignaci√≥n de responsable | TL o Developer |
| 5 | Desarrollo y pruebas | Developer |
| 6 | Commit con referencia al Issue | Developer |
| 7 | QA valida cambios | QA |
| 8 | Merge ‚Üí cierre autom√°tico | GitHub |
| 9 | Actualiza ticket con n√∫mero de commit/PR | Developer |
| 10 | Cierre final en CRM | Developer o QA |

---

## 7. Pr√°ctica Guiada (Demo interna)

Cada integrante deber√°:
1. Crear una Issue real o simulada desde un ticket CRM.  
2. Asignarse, etiquetar y documentar seg√∫n el formato.  
3. Simular una rama y un commit `Ref #xxx`.  
4. Dejar comentarios sobre claridad o mejoras para la versi√≥n 1.5.

---

## 8. Cumplimiento

El cumplimiento de este manual es **obligatorio**.  
Issues o commits que no respeten estas pol√≠ticas podr√°n ser **rechazados** en revisi√≥n t√©cnica o QA.

---

## ANEXO A. Pol√≠tica de Respaldo de Issues y Metadatos

### A.1 Motivo
GitHub no garantiza cobertura total de todos los metadatos de un repositorio (issues, comentarios, discusiones, LFS, etc.).  
Fuentes oficiales:  
- [GitHub Docs ‚Äì Backing up a repository](https://docs.github.com/en/repositories/archiving-a-github-repository/backing-up-a-repository)  
- [Rewind: Three Ways to Backup Your GitHub Issues](https://rewind.com/blog/three-ways-to-backup-your-github-issues/)  
- [GitProtect.io ‚Äì GitHub Backup Best Practices](https://gitprotect.io/blog/github-backup-best-practices/)

### A.2 Pol√≠tica
- **Frecuencia:** Trimestral (enero, abril, julio, octubre).  
- **Responsable:** Team Lead o developer designado.  
- **M√©todo:** Manual o automatizado (n8n, PowerShell, API).  
  Una vez implementada la automatizaci√≥n, deber√° documentarse y anexarse formalmente.  
- **Contenido m√≠nimo:** Issues, comentarios, PRs, labels, milestones y configuraciones clave.  
- **Retenci√≥n:** 12 meses m√≠nimo en repositorio seguro definido por Smart Strategy.

> *Esta pol√≠tica complementa el manejo de Issues; su objetivo es preservar la trazabilidad hist√≥rica sin generar carga administrativa excesiva.*

---

## 9. Referencias

- [GitHub Docs: About Issues](https://docs.github.com/articles/about-issues)  
- [GitHub Docs: Backing up a repository](https://docs.github.com/en/repositories/archiving-a-github-repository/backing-up-a-repository)  
- [Rewind Blog: Best Practices for GitHub Issues](https://rewind.com/blog/best-practices-for-using-github-issues/)  
- [GitProtect.io: Backup Best Practices](https://gitprotect.io/blog/github-backup-best-practices/)  
- [YouTube: Issues Workflow en GitHub](https://www.youtube.com/watch?v=cIhNWpU5ZJg)

---
